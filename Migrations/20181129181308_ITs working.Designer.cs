// <auto-generated />
using System;
using GidIndustrial.Gideon.WebApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GidIndustrial.Gideon.WebApi.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20181129181308_ITs working")]
    partial class ITsworking
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Address", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<string>("Attention");

                    b.Property<string>("City");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("State");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("ZipPostalCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentTypeId");

                    b.Property<bool>("Confirmed");

                    b.Property<string>("ContentType");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OfficialFilename");

                    b.Property<long>("Size");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Uri");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.AttachmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("AttachmentType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.BankAccount", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("IsDefaultCCAccount");

                    b.Property<bool>("Locked");

                    b.Property<string>("Name");

                    b.Property<string>("QuickBooksId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Bill", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("CurrencyOptionId");

                    b.Property<DateTime?>("DateDue");

                    b.Property<decimal>("DiscountPercent");

                    b.Property<DateTime?>("EnteredAt");

                    b.Property<decimal>("ExpediteFee");

                    b.Property<int?>("GidLocationOptionId");

                    b.Property<int?>("PurchaseOrderId");

                    b.Property<string>("QuickBooksId");

                    b.Property<string>("QuickBooksSyncToken");

                    b.Property<decimal>("SalesTax");

                    b.Property<decimal>("ShippingAndHandlingFee");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<decimal>("WireTransferFee");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.BillAttachment", b =>
                {
                    b.Property<int>("BillId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("BillId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("BillAttachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.BillCashDisbursement", b =>
                {
                    b.Property<int?>("BillId");

                    b.Property<int?>("CashDisbursementId");

                    b.Property<decimal>("Amount");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.HasKey("BillId", "CashDisbursementId");

                    b.HasIndex("CashDisbursementId");

                    b.ToTable("BillCashDisbursement");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.BillChatMessage", b =>
                {
                    b.Property<int?>("BillId");

                    b.Property<int?>("ChatMessageId");

                    b.Property<int?>("BillChatMessageTypeId");

                    b.HasKey("BillId", "ChatMessageId");

                    b.HasIndex("ChatMessageId");

                    b.ToTable("BillChatMessage");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.BillLineItem", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BillId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<decimal>("DiscountPercent");

                    b.Property<int?>("GLAccountId");

                    b.Property<string>("ManufacturerName");

                    b.Property<decimal>("Price");

                    b.Property<int?>("ProductId");

                    b.Property<int?>("PurchaseOrderLineItemId");

                    b.Property<int>("Quantity");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderLineItemId");

                    b.ToTable("BillLineItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CashAccount", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("Locked");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("CashAccount");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CashDisbursement", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Balance");

                    b.Property<int?>("BankAccountId");

                    b.Property<int?>("CashDisbursementReasonOptionId");

                    b.Property<int?>("CashDisbursementTypeId");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("CreditCardTransactionId");

                    b.Property<int?>("CurrencyOptionId");

                    b.Property<DateTime?>("DateDisbursed");

                    b.Property<string>("Note");

                    b.Property<int?>("PaymentAccountId");

                    b.Property<int?>("PurchaseOrderPaymentMethodId");

                    b.Property<string>("QuickBooksBillPaymentId");

                    b.Property<string>("QuickBooksBillPaymentSyncToken");

                    b.Property<string>("QuickBooksRefundReceiptId");

                    b.Property<string>("QuickBooksRefundReceiptSyncToken");

                    b.Property<string>("ReferenceNumber");

                    b.Property<int?>("RmaId");

                    b.Property<int?>("SalesOrderId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrencyOptionId");

                    b.HasIndex("PaymentAccountId");

                    b.HasIndex("RmaId");

                    b.ToTable("CashDisbursement");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CashDisbursementReasonOption", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("CashDisbursementReasonOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CashReceipt", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Balance");

                    b.Property<int?>("BankAccountId");

                    b.Property<int?>("CashReceiptTypeId");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("CreditCardTransactionId");

                    b.Property<int?>("CurrencyOptionId");

                    b.Property<DateTime?>("DateReceived");

                    b.Property<string>("QuickBooksId");

                    b.Property<string>("QuickBooksSyncToken");

                    b.Property<int?>("SalesOrderId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrencyOptionId");

                    b.ToTable("CashReceipt");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CashReceiptType", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("CashReceiptType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatMessageId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("InReplyToChatMessageId");

                    b.Property<string>("Message");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ChatMessageAttachment", b =>
                {
                    b.Property<int?>("ChatMessageId");

                    b.Property<int?>("AttachmentId");

                    b.Property<int?>("ChatMessageAttachmentTypeId");

                    b.HasKey("ChatMessageId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("ChatMessageAttachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnnualRevenue");

                    b.Property<bool?>("ApprovedForTerms");

                    b.Property<string>("AuthorizeNetProfileId");

                    b.Property<int?>("BillingAddressAddressId");

                    b.Property<int?>("BillingAddressCompanyId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CustomerTypeId");

                    b.Property<string>("DunsNumber");

                    b.Property<string>("Name");

                    b.Property<int?>("NumberOfEmployees");

                    b.Property<int?>("ParentCompanyId");

                    b.Property<string>("QuickBooksCustomerId");

                    b.Property<string>("QuickBooksCustomerSyncToken");

                    b.Property<string>("QuickBooksVendorId");

                    b.Property<string>("QuickBooksVendorSyncToken");

                    b.Property<int?>("ShippingAddressAddressId");

                    b.Property<int?>("ShippingAddressCompanyId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Name");

                    b.HasIndex("ParentCompanyId");

                    b.HasIndex("BillingAddressCompanyId", "BillingAddressAddressId");

                    b.HasIndex("ShippingAddressCompanyId", "ShippingAddressAddressId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyAddress", b =>
                {
                    b.Property<int>("CompanyId");

                    b.Property<int?>("AddressId");

                    b.Property<int>("CompanyAddressTypeId");

                    b.HasKey("CompanyId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("CompanyAddress");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("CompanyAddressType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyAlias", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("CompanyId");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyAlias");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyAttachment", b =>
                {
                    b.Property<int>("CompanyId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("CompanyId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("CompanyAttachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyContact", b =>
                {
                    b.Property<int?>("ContactId");

                    b.Property<int?>("CompanyId");

                    b.Property<int>("CompanyContactRelationshipTypeId");

                    b.HasKey("ContactId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyContact");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyContactRelationshipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("CompanyContactRelationshipType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyEmailAddress", b =>
                {
                    b.Property<int?>("CompanyId");

                    b.Property<int?>("EmailAddressId");

                    b.Property<int?>("CompanyEmailAddressTypeId");

                    b.HasKey("CompanyId", "EmailAddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmailAddressId");

                    b.ToTable("CompanyEmailAddress");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyEmailAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("CompanyEmailAddressType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyEventLogEntry", b =>
                {
                    b.Property<int?>("CompanyId");

                    b.Property<int?>("EventLogEntryId");

                    b.HasKey("CompanyId", "EventLogEntryId");

                    b.HasIndex("EventLogEntryId");

                    b.ToTable("CompanyEventLogEntry");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyNote", b =>
                {
                    b.Property<int>("CompanyId");

                    b.Property<int>("NoteId");

                    b.HasKey("CompanyId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("CompanyNote");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyPhoneNumber", b =>
                {
                    b.Property<int?>("CompanyId");

                    b.Property<int?>("PhoneNumberId");

                    b.Property<int?>("CompanyPhoneNumberTypeId");

                    b.HasKey("CompanyId", "PhoneNumberId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("CompanyPhoneNumber");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyPhoneNumberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("CompanyPhoneNumberType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyPortal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime?>("MemberSince");

                    b.Property<int?>("PortalId");

                    b.Property<decimal?>("PositiveFeedbackPercent");

                    b.Property<string>("Rating");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PortalId");

                    b.ToTable("CompanyPortal");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data");

                    b.HasKey("Id");

                    b.ToTable("Config");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactAddress", b =>
                {
                    b.Property<int>("ContactId");

                    b.Property<int?>("AddressId");

                    b.Property<int>("ContactAddressTypeId");

                    b.HasKey("ContactId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("ContactAddress");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ContactAddressType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactAttachment", b =>
                {
                    b.Property<int>("ContactId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("ContactId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("ContactAttachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactEmailAddress", b =>
                {
                    b.Property<int?>("ContactId");

                    b.Property<int?>("EmailAddressId");

                    b.Property<int?>("ContactEmailAddressTypeId");

                    b.HasKey("ContactId", "EmailAddressId");

                    b.HasIndex("ContactId");

                    b.HasIndex("EmailAddressId");

                    b.ToTable("ContactEmailAddress");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactEmailAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ContactEmailAddressType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactEventLogEntry", b =>
                {
                    b.Property<int?>("ContactId");

                    b.Property<int?>("EventLogEntryId");

                    b.HasKey("ContactId", "EventLogEntryId");

                    b.HasIndex("EventLogEntryId");

                    b.ToTable("ContactEventLogEntry");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactNote", b =>
                {
                    b.Property<int>("ContactId");

                    b.Property<int>("NoteId");

                    b.HasKey("ContactId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("ContactNote");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactPhoneNumber", b =>
                {
                    b.Property<int?>("ContactId");

                    b.Property<int?>("PhoneNumberId");

                    b.Property<int?>("ContactPhoneNumberTypeId");

                    b.HasKey("ContactId", "PhoneNumberId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("ContactPhoneNumber");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactPhoneNumberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ContactPhoneNumberType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Country", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CpuStockVerifiedOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("CpuStockVerifiedOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Credit", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Balance");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("CreditAccountId");

                    b.Property<DateTime?>("CreditedAt");

                    b.Property<decimal>("CurrencyOptionId");

                    b.Property<string>("Note");

                    b.Property<int?>("RmaId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("CurrencyOptionId");

                    b.HasIndex("RmaId");

                    b.ToTable("Credit");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CreditAccount", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("Locked");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("CreditAccount");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CreditCard", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNumberEncrypted");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("ExpirationMonthEncrypted");

                    b.Property<string>("ExpirationYearEncrypted");

                    b.Property<bool?>("IsPrimary");

                    b.Property<string>("NameOnCardEncrypted");

                    b.Property<string>("SecurityCodeEncrypted");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("CreditCard");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CreditCardTransaction", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal?>("AmountCaptured");

                    b.Property<decimal?>("AmountRefunded");

                    b.Property<int?>("BankAccountId");

                    b.Property<string>("CardBrand");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<int>("CreditCardTransactionType");

                    b.Property<int?>("CurrencyOptionId");

                    b.Property<string>("ErrorCode");

                    b.Property<string>("ErrorMessage");

                    b.Property<bool?>("FullyRefunded");

                    b.Property<int?>("InvoiceId");

                    b.Property<string>("Last4");

                    b.Property<bool?>("NotCaptured");

                    b.Property<string>("OverallStatus");

                    b.Property<string>("PaymentProfileId");

                    b.Property<string>("RelatedTransactionId");

                    b.Property<string>("ResultCode");

                    b.Property<string>("ResultMessageCode");

                    b.Property<string>("ResultMessageText");

                    b.Property<int?>("SalesOrderId");

                    b.Property<bool>("Succeeded");

                    b.Property<string>("TransactionId");

                    b.Property<DateTime?>("VoidedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardTransactionType");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("CreditCardTransaction");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CurrencyOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Locked");

                    b.Property<string>("Name");

                    b.Property<string>("Symbol");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.Property<decimal?>("WireTransferFee");

                    b.HasKey("Id");

                    b.ToTable("CurrencyOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("CustomerType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.EmailAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Address");

                    b.ToTable("EmailAddress");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.EmailAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("EmailAddressType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("EmailTemplateTypeId");

                    b.Property<string>("HtmlContent");

                    b.Property<string>("Subject");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.EmailTemplateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Locked");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplateType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.EventLogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Event");

                    b.Property<DateTime>("OccurredAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.ToTable("EventLogEntry");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.GidLocationOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankingInfo");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("DefaultCurrency");

                    b.Property<int?>("DefaultShippingAddressId");

                    b.Property<bool>("Locked");

                    b.Property<int?>("MainAddressId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("DefaultShippingAddressId");

                    b.HasIndex("MainAddressId");

                    b.ToTable("GidLocationOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.GLAccount", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("IsDefaultCCAccount");

                    b.Property<bool>("Locked");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("GLAccount");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.IncomingShipment", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActualArrivalDate");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CurrentLocation");

                    b.Property<string>("CurrentShippingStatus");

                    b.Property<DateTime?>("DateShipped");

                    b.Property<DateTime?>("ExpectedArrivalDate");

                    b.Property<int?>("ReceiptSignerId");

                    b.Property<int?>("ShippingCarrierId");

                    b.Property<int?>("ShippingCarrierShippingMethodId");

                    b.Property<string>("TrackingNumber");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptSignerId");

                    b.HasIndex("ShippingCarrierId");

                    b.ToTable("IncomingShipment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.IncomingShipmentInventoryItem", b =>
                {
                    b.Property<int?>("IncomingShipmentId");

                    b.Property<int?>("InventoryItemId");

                    b.Property<DateTime?>("ReceivedAt");

                    b.Property<int?>("ReceivedById");

                    b.HasKey("IncomingShipmentId", "InventoryItemId");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("IncomingShipmentInventoryItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.IncomingShipmentShipmentTrackingEvent", b =>
                {
                    b.Property<int?>("IncomingShipmentId");

                    b.Property<int?>("ShipmentTrackingEventId");

                    b.HasKey("IncomingShipmentId", "ShipmentTrackingEventId");

                    b.HasIndex("ShipmentTrackingEventId");

                    b.ToTable("IncomingShipmentShipmentTrackingEvent");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItem", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("CurrencyOptionId");

                    b.Property<string>("Description");

                    b.Property<int?>("InventoryItemId");

                    b.Property<int?>("InventoryItemLocationOptionId");

                    b.Property<int>("InventoryItemStatusOptionId");

                    b.Property<int?>("ManufacturerId");

                    b.Property<int?>("ProductConditionOptionId");

                    b.Property<int?>("ProductId");

                    b.Property<int?>("PurchaseOrderLineItemId");

                    b.Property<string>("SerialNumber");

                    b.Property<decimal?>("TotalCost");

                    b.Property<decimal?>("UnitCost");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderLineItemId");

                    b.HasIndex("SerialNumber");

                    b.ToTable("InventoryItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItemAttachment", b =>
                {
                    b.Property<int>("InventoryItemId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("InventoryItemId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("InventoryItemAttachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItemConditionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("InventoryItemConditionOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItemEventLogEntry", b =>
                {
                    b.Property<int?>("InventoryItemId");

                    b.Property<int?>("EventLogEntryId");

                    b.Property<int?>("EventLogEntryId1");

                    b.HasKey("InventoryItemId", "EventLogEntryId");

                    b.HasIndex("EventLogEntryId");

                    b.HasIndex("EventLogEntryId1");

                    b.ToTable("InventoryItemEventLogEntry");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItemLocationOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("InventoryItemLocationOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItemNote", b =>
                {
                    b.Property<int?>("InventoryItemId");

                    b.Property<int?>("NoteId");

                    b.Property<int?>("NoteId1");

                    b.HasKey("InventoryItemId", "NoteId");

                    b.HasIndex("NoteId");

                    b.HasIndex("NoteId1");

                    b.ToTable("InventoryItemNote");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItemRelatedInventoryItem", b =>
                {
                    b.Property<int?>("ParentInventoryItemId");

                    b.Property<int?>("ChildInventoryItemId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("ParentInventoryItemId", "ChildInventoryItemId");

                    b.HasIndex("ChildInventoryItemId")
                        .IsUnique();

                    b.ToTable("InventoryItemRelatedInventoryItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItemStatusOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("InventoryItemStatusOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItemWorkLogItem", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("InventoryItemWorkLogItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Invoice", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Balance");

                    b.Property<int?>("BillingAddressId");

                    b.Property<DateTime?>("CancelledAt");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ContactId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("CurrencyOptionId");

                    b.Property<string>("CustomerPurchaseOrderNumber");

                    b.Property<DateTime?>("DateDue");

                    b.Property<DateTime?>("DateSent");

                    b.Property<decimal>("DiscountPercent");

                    b.Property<string>("Email");

                    b.Property<decimal>("ExpediteFee");

                    b.Property<int?>("GidLocationOptionId");

                    b.Property<string>("Phone");

                    b.Property<string>("QuickBooksId");

                    b.Property<string>("QuickBooksSyncToken");

                    b.Property<int?>("SalesOrderId");

                    b.Property<int?>("SalesPersonId");

                    b.Property<decimal>("SalesTax");

                    b.Property<DateTime?>("SentAt");

                    b.Property<bool?>("ShippedOnly");

                    b.Property<int?>("ShippingAddressId");

                    b.Property<decimal>("ShippingAndHandlingFee");

                    b.Property<int?>("ShippingCarrierId");

                    b.Property<int?>("ShippingCarrierShippingMethodId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<decimal>("WireTransferFee");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CurrencyOptionId");

                    b.HasIndex("GidLocationOptionId");

                    b.HasIndex("SalesOrderId");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("ShippingCarrierId");

                    b.HasIndex("ShippingCarrierShippingMethodId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InvoiceAttachment", b =>
                {
                    b.Property<int>("InvoiceId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("InvoiceId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("InvoiceAttachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InvoiceCashReceipt", b =>
                {
                    b.Property<int?>("InvoiceId");

                    b.Property<int?>("CashReceiptId");

                    b.Property<decimal>("Amount");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.HasKey("InvoiceId", "CashReceiptId");

                    b.HasIndex("CashReceiptId");

                    b.ToTable("InvoiceCashReceipt");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InvoiceChatMessage", b =>
                {
                    b.Property<int?>("InvoiceId");

                    b.Property<int?>("ChatMessageId");

                    b.Property<int?>("InvoiceChatMessageTypeId");

                    b.HasKey("InvoiceId", "ChatMessageId");

                    b.HasIndex("ChatMessageId");

                    b.ToTable("InvoiceChatMessage");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InvoiceCredit", b =>
                {
                    b.Property<int?>("InvoiceId");

                    b.Property<int?>("CreditId");

                    b.Property<decimal>("Amount");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.HasKey("InvoiceId", "CreditId");

                    b.HasIndex("CreditId");

                    b.ToTable("InvoiceCredit");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InvoiceEventLogEntry", b =>
                {
                    b.Property<int?>("InvoiceId");

                    b.Property<int?>("EventLogEntryId");

                    b.HasKey("InvoiceId", "EventLogEntryId");

                    b.HasIndex("EventLogEntryId");

                    b.ToTable("InvoiceEventLogEntry");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InvoiceLineItem", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<decimal?>("DiscountPercent");

                    b.Property<int?>("InvoiceId");

                    b.Property<string>("ManufacturerName");

                    b.Property<decimal?>("Price");

                    b.Property<int?>("ProductId");

                    b.Property<int?>("Quantity");

                    b.Property<string>("QuickBooksId");

                    b.Property<int?>("SalesOrderLineItemId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderLineItemId");

                    b.ToTable("InvoiceLineItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalData");

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<bool?>("AutoResponseSent");

                    b.Property<string>("BrowserName");

                    b.Property<string>("BrowserVersion");

                    b.Property<string>("Category");

                    b.Property<string>("City");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("CompanyName");

                    b.Property<int?>("ContactId");

                    b.Property<string>("CountryCode");

                    b.Property<int?>("CountryId");

                    b.Property<string>("CountryName");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("CustomerType");

                    b.Property<int?>("CustomerTypeId");

                    b.Property<string>("DunsNumber");

                    b.Property<string>("Email");

                    b.Property<string>("Emoji");

                    b.Property<bool?>("Freeform");

                    b.Property<string>("FullName");

                    b.Property<string>("GeolocationCity");

                    b.Property<string>("GeolocationCountryCode");

                    b.Property<string>("GeolocationCountryName");

                    b.Property<decimal?>("GeolocationLatitude");

                    b.Property<decimal?>("GeolocationLongitude");

                    b.Property<string>("GeolocationPostalCode");

                    b.Property<string>("GeolocationRegionCode");

                    b.Property<string>("GeolocationRegionName");

                    b.Property<string>("GeolocationTimeZone");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Key");

                    b.Property<long?>("LALeadNumber");

                    b.Property<int?>("LeadOriginOptionId");

                    b.Property<int?>("LeadStatusOptionId");

                    b.Property<string>("Manufacturer");

                    b.Property<int?>("NewId");

                    b.Property<string>("NotesText");

                    b.Property<int?>("OldId");

                    b.Property<string>("OriginText");

                    b.Property<string>("PartNumber");

                    b.Property<string>("Phone");

                    b.Property<string>("Position");

                    b.Property<int?>("Quality");

                    b.Property<int?>("Quantity");

                    b.Property<string>("ReferrerUrl");

                    b.Property<int?>("RequiredDeliveryTimeId");

                    b.Property<int?>("RequiredDeliveryWeeks");

                    b.Property<int?>("SalesPersonId");

                    b.Property<string>("Service");

                    b.Property<string>("SourceUrl");

                    b.Property<string>("State");

                    b.Property<DateTime?>("Timestamp");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UserAgent");

                    b.Property<int?>("UserId");

                    b.Property<string>("WebServerName");

                    b.Property<string>("Website");

                    b.Property<string>("ZipPostalCode");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyName");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email");

                    b.HasIndex("LALeadNumber");

                    b.HasIndex("Phone");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("UserId");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadAttachment", b =>
                {
                    b.Property<int>("LeadId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("LeadId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("LeadAttachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadChatMessage", b =>
                {
                    b.Property<int?>("LeadId");

                    b.Property<int?>("ChatMessageId");

                    b.Property<int?>("LeadChatMessageTypeId");

                    b.HasKey("LeadId", "ChatMessageId");

                    b.HasIndex("ChatMessageId");

                    b.ToTable("LeadChatMessage");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadEventLogEntry", b =>
                {
                    b.Property<int?>("LeadId");

                    b.Property<int?>("EventLogEntryId");

                    b.HasKey("LeadId", "EventLogEntryId");

                    b.HasIndex("EventLogEntryId");

                    b.ToTable("LeadEventLogEntry");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Name");

                    b.Property<bool>("Public");

                    b.Property<string>("SearchCriteria");

                    b.HasKey("Id");

                    b.ToTable("LeadFilter");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<int>("LeadId");

                    b.Property<int?>("LineItemServiceTypeId");

                    b.Property<string>("ManufacturerName");

                    b.Property<int?>("ProductId");

                    b.Property<string>("ProductName");

                    b.Property<int?>("Quantity");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductName");

                    b.ToTable("LeadLineItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadLineItemSource", b =>
                {
                    b.Property<int?>("LeadLineItemId");

                    b.Property<int?>("SourceId");

                    b.Property<int?>("Quantity");

                    b.HasKey("LeadLineItemId", "SourceId");

                    b.HasIndex("SourceId");

                    b.ToTable("LeadLineItemSource");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadNote", b =>
                {
                    b.Property<int?>("LeadId");

                    b.Property<int?>("NoteId");

                    b.HasKey("LeadId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("LeadNote");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadOriginOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("LeadOriginOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadRoutingAction", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("LeadId");

                    b.Property<string>("MatchedUserIds");

                    b.Property<int?>("SelectedUserId");

                    b.HasKey("Id");

                    b.ToTable("LeadRoutingAction");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRule", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryIncludeOptionId");

                    b.Property<int?>("DailyLeadLimit");

                    b.Property<int?>("LeadWebsiteIncludeOptionId");

                    b.Property<int?>("ProductTypeIncludeOptionId");

                    b.Property<int?>("SBCDailyLimit");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LeadRoutingRule");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRuleCountry", b =>
                {
                    b.Property<int?>("LeadRoutingRuleId");

                    b.Property<int?>("CountryId");

                    b.HasKey("LeadRoutingRuleId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("LeadRoutingRuleCountry");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRuleLeadWebsite", b =>
                {
                    b.Property<int?>("LeadRoutingRuleId");

                    b.Property<int?>("LeadWebsiteId");

                    b.HasKey("LeadRoutingRuleId", "LeadWebsiteId");

                    b.HasIndex("LeadWebsiteId");

                    b.ToTable("LeadRoutingRuleLeadWebsite");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRuleLineItemServiceType", b =>
                {
                    b.Property<int?>("LeadRoutingRuleId");

                    b.Property<int?>("LineItemServiceTypeId");

                    b.HasKey("LeadRoutingRuleId", "LineItemServiceTypeId");

                    b.HasIndex("LineItemServiceTypeId");

                    b.ToTable("LeadRoutingRuleLineItemServiceType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRuleProductType", b =>
                {
                    b.Property<int?>("LeadRoutingRuleId");

                    b.Property<int?>("ProductTypeId");

                    b.HasKey("LeadRoutingRuleId", "ProductTypeId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("LeadRoutingRuleProductType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadStatusOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("LeadStatusOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadWebsite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("LeadWebsite");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LineItemConditionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("LineItemConditionType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LineItemServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("LineItemServiceType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ListingsContainer", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("ListingsJSON");

                    b.Property<string>("ListingsToHideJSON");

                    b.Property<int?>("ProductId");

                    b.HasKey("Id");

                    b.ToTable("ListingsContainer");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.OutgoingLineItemLeadTimeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("NumberOfBusinessDays");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("OutgoingLineItemLeadTimeOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.OutgoingLineItemWarrantyOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("OutgoingLineItemWarrantyOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.OutgoingShipment", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActualArrival");

                    b.Property<string>("CommercialInvoiceSpecialInstructions");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("ECCN");

                    b.Property<DateTime?>("ExpectedArrival");

                    b.Property<string>("LicenseRequired");

                    b.Property<int?>("OutgoingShipmentShippingTermOptionId");

                    b.Property<string>("PackingSlipSpecialNotes");

                    b.Property<DateTime?>("ShippedAt");

                    b.Property<int?>("ShippingAddressId");

                    b.Property<int?>("ShippingCarrierId");

                    b.Property<int?>("ShippingCarrierShippingMethodId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("OutgoingShipmentShippingTermOptionId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("ShippingCarrierId");

                    b.HasIndex("ShippingCarrierShippingMethodId");

                    b.ToTable("OutgoingShipment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.OutgoingShipmentBox", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActualArrival");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime?>("ExpectedArrival");

                    b.Property<float?>("Height");

                    b.Property<float?>("Length");

                    b.Property<int?>("OutgoingShipmentId");

                    b.Property<string>("TrackingNumber");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<decimal?>("Weight");

                    b.Property<float?>("Width");

                    b.HasKey("Id");

                    b.HasIndex("OutgoingShipmentId");

                    b.ToTable("OutgoingShipmentBox");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.OutgoingShipmentBoxDimensionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("OutgoingShipmentBoxDimensionOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.OutgoingShipmentBoxInventoryItem", b =>
                {
                    b.Property<int>("OutgoingShipmentBoxId");

                    b.Property<int>("InventoryItemId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.HasKey("OutgoingShipmentBoxId", "InventoryItemId");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("OutgoingShipmentBoxInventoryItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.OutgoingShipmentShipmentTrackingEvent", b =>
                {
                    b.Property<int?>("OutgoingShipmentId");

                    b.Property<int?>("ShipmentTrackingEventId");

                    b.HasKey("OutgoingShipmentId", "ShipmentTrackingEventId");

                    b.ToTable("OutgoingShipmentShipmentTrackingEvent");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.OutgoingShipmentShippingTermOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("OutgoingShipmentShippingTermOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PaymentAccount", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("Locked");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("PaymentAccount");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowedGroups");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PhoneNumber", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Extension");

                    b.Property<string>("Number");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Number");

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PhoneNumberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PhoneNumberType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Portal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Portal");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description");

                    b.Property<string>("GidPartNumber");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("PartNumber");

                    b.Property<int?>("ProductCompositeItemOptionId");

                    b.Property<int?>("ProductEndOfLifeOptionId");

                    b.Property<int?>("ProductTypeId");

                    b.Property<string>("QuickBooksId");

                    b.Property<string>("QuickBooksSyncToken");

                    b.Property<bool>("Serialized");

                    b.Property<string>("ShortDescription");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("GidPartNumber");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PartNumber");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ProductAttachment", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("ProductId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("ProductAttachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ProductCompositeItemOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ProductCompositeItemOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ProductConditionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ProductConditionOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ProductEndOfLifeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ProductEndOfLifeOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ProductNote", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("NoteId");

                    b.HasKey("ProductId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("ProductNote");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrder", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuyerId");

                    b.Property<string>("ConfirmationNumber");

                    b.Property<int?>("ContactId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("CurrencyOptionId")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<DateTime?>("ExpectedArrivalDate");

                    b.Property<DateTime?>("ExpectedShipDate");

                    b.Property<decimal?>("ExpediteFee");

                    b.Property<int?>("GidLocationOptionId");

                    b.Property<bool?>("Ncnr");

                    b.Property<bool?>("NeedsFunding");

                    b.Property<string>("Phone");

                    b.Property<int?>("PurchaseOrderPaymentMethodId");

                    b.Property<int?>("PurchaseOrderReasonOptionId");

                    b.Property<int?>("PurchaseOrderStatusOptionId");

                    b.Property<decimal?>("SalesTax");

                    b.Property<bool?>("Sent");

                    b.Property<DateTime?>("SentAt");

                    b.Property<int?>("ShippingAddressId");

                    b.Property<decimal?>("ShippingAndHandlingFee");

                    b.Property<int?>("ShippingMethodId");

                    b.Property<int?>("SupplierId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<decimal?>("WireTransferFee");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CurrencyOptionId");

                    b.HasIndex("Email");

                    b.HasIndex("GidLocationOptionId");

                    b.HasIndex("Phone");

                    b.HasIndex("PurchaseOrderPaymentMethodId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderAttachment", b =>
                {
                    b.Property<int>("PurchaseOrderId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("PurchaseOrderId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("PurchaseOrderAttachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderChatMessage", b =>
                {
                    b.Property<int?>("PurchaseOrderId");

                    b.Property<int?>("ChatMessageId");

                    b.Property<int?>("PurchaseOrderChatMessageTypeId");

                    b.HasKey("PurchaseOrderId", "ChatMessageId");

                    b.HasIndex("ChatMessageId");

                    b.ToTable("PurchaseOrderChatMessage");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderEventLogEntry", b =>
                {
                    b.Property<int>("PurchaseOrderId");

                    b.Property<int>("EventLogEntryId");

                    b.HasKey("PurchaseOrderId", "EventLogEntryId");

                    b.HasIndex("EventLogEntryId");

                    b.ToTable("PurchaseOrderEventLogEntry");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Name");

                    b.Property<bool>("Public");

                    b.Property<string>("SearchCriteria");

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrderFilter");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderIncomingShipment", b =>
                {
                    b.Property<int?>("PurchaseOrderId");

                    b.Property<int?>("IncomingShipmentId");

                    b.HasKey("PurchaseOrderId", "IncomingShipmentId");

                    b.HasIndex("IncomingShipmentId");

                    b.ToTable("PurchaseOrderIncomingShipment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderLineItem", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cost");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<decimal?>("DiscountPercent");

                    b.Property<int?>("LineItemConditionTypeId");

                    b.Property<int?>("LineItemServiceTypeId");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("ManufacturerName");

                    b.Property<int?>("ProductId");

                    b.Property<string>("ProductName");

                    b.Property<int>("PurchaseOrderId");

                    b.Property<int?>("Quantity");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("WarrantyDuration");

                    b.Property<string>("WarrantyDurationUnit");

                    b.HasKey("Id");

                    b.HasIndex("LineItemConditionTypeId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderLineItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderNote", b =>
                {
                    b.Property<int>("PurchaseOrderId");

                    b.Property<int>("NoteId");

                    b.HasKey("PurchaseOrderId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("PurchaseOrderNote");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderPaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrderPaymentMethod");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderReasonOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrderReasonOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderStatusOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrderStatusOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BillingAddressId");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ContactId");

                    b.Property<bool?>("CopyBillingToShipping");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("CurrencyOptionId")
                        .IsRequired();

                    b.Property<string>("CustomerNotes");

                    b.Property<int?>("CustomerTypeId");

                    b.Property<string>("Email");

                    b.Property<decimal?>("ExpediteFee");

                    b.Property<DateTime?>("Expiration");

                    b.Property<int?>("GidLocationOptionId");

                    b.Property<int?>("LeadId");

                    b.Property<string>("Phone");

                    b.Property<string>("QuoteFormLink");

                    b.Property<int?>("QuoteStatusOptionId");

                    b.Property<int?>("SalesPersonId");

                    b.Property<decimal?>("SalesTax");

                    b.Property<int?>("ShippingAddressId");

                    b.Property<decimal?>("ShippingAndHandlingFee");

                    b.Property<int?>("ShippingMethodId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<decimal?>("WireTransferFee");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CurrencyOptionId");

                    b.HasIndex("Email");

                    b.HasIndex("GidLocationOptionId");

                    b.HasIndex("LeadId");

                    b.HasIndex("Phone");

                    b.HasIndex("QuoteStatusOptionId");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("ShippingMethodId");

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("QuoteAddressType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteAttachment", b =>
                {
                    b.Property<int>("QuoteId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("QuoteId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("QuoteAttachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteChatMessage", b =>
                {
                    b.Property<int?>("QuoteId");

                    b.Property<int?>("ChatMessageId");

                    b.Property<int?>("QuoteChatMessageTypeId");

                    b.HasKey("QuoteId", "ChatMessageId");

                    b.HasIndex("ChatMessageId");

                    b.ToTable("QuoteChatMessage");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteEventLogEntry", b =>
                {
                    b.Property<int>("QuoteId");

                    b.Property<int>("EventLogEntryId");

                    b.HasKey("QuoteId", "EventLogEntryId");

                    b.HasIndex("EventLogEntryId");

                    b.ToTable("QuoteEventLogEntry");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Name");

                    b.Property<bool>("Public");

                    b.Property<string>("SearchCriteria");

                    b.HasKey("Id");

                    b.ToTable("QuoteFilter");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteLineItem", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<decimal?>("DiscountPercent");

                    b.Property<string>("DisplayPartNumber");

                    b.Property<int?>("LineItemConditionTypeId");

                    b.Property<int?>("LineItemServiceTypeId");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("ManufacturerName");

                    b.Property<int?>("OutgoingLineItemLeadTimeOptionId");

                    b.Property<int?>("OutgoingLineItemWarrantyOptionId");

                    b.Property<decimal?>("Price");

                    b.Property<int?>("ProductId");

                    b.Property<string>("ProductName");

                    b.Property<int?>("Quantity");

                    b.Property<int?>("QuoteId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("LineItemConditionTypeId");

                    b.HasIndex("LineItemServiceTypeId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OutgoingLineItemLeadTimeOptionId");

                    b.HasIndex("OutgoingLineItemWarrantyOptionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuoteLineItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteLineItemSource", b =>
                {
                    b.Property<int>("QuoteLineItemId");

                    b.Property<int>("SourceId");

                    b.Property<int?>("Quantity");

                    b.HasKey("QuoteLineItemId", "SourceId");

                    b.HasIndex("SourceId");

                    b.ToTable("QuoteLineItemSource");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteNote", b =>
                {
                    b.Property<int>("QuoteId");

                    b.Property<int>("NoteId");

                    b.HasKey("QuoteId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("QuoteNote");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteStatusOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("QuoteStatusOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Repair", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime?>("DateIssued");

                    b.Property<int?>("RepairAuthorizationAttachmentId");

                    b.Property<int?>("SalesOrderId");

                    b.HasKey("Id");

                    b.HasIndex("RepairAuthorizationAttachmentId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("Repair");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RepairIncomingShipment", b =>
                {
                    b.Property<int?>("RepairId");

                    b.Property<int?>("IncomingShipmentId");

                    b.HasKey("RepairId", "IncomingShipmentId");

                    b.HasIndex("IncomingShipmentId");

                    b.ToTable("RepairIncomingShipment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RequiredDeliveryTimeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("RequiredDeliveryTimeOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Rma", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<decimal?>("CreditAmount");

                    b.Property<int?>("CurrencyOptionId");

                    b.Property<int?>("GidLocationOptionId");

                    b.Property<int?>("RmaActionOptionId");

                    b.Property<int?>("RmaReasonOptionId");

                    b.Property<int?>("RmaStatusOptionId");

                    b.Property<int?>("SalesOrderId");

                    b.Property<DateTime?>("SentAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CurrencyOptionId");

                    b.HasIndex("GidLocationOptionId");

                    b.HasIndex("RmaActionOptionId");

                    b.HasIndex("RmaReasonOptionId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("Rma");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaActionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("RmaActionOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaAttachment", b =>
                {
                    b.Property<int>("RmaId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("RmaId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("RmaAttachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaChatMessage", b =>
                {
                    b.Property<int?>("RmaId");

                    b.Property<int?>("ChatMessageId");

                    b.Property<int?>("RmaChatMessageTypeId");

                    b.HasKey("RmaId", "ChatMessageId");

                    b.HasIndex("ChatMessageId");

                    b.ToTable("RmaChatMessage");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaEventLogEntry", b =>
                {
                    b.Property<int>("RmaId");

                    b.Property<int>("EventLogEntryId");

                    b.HasKey("RmaId", "EventLogEntryId");

                    b.HasIndex("EventLogEntryId");

                    b.ToTable("RmaEventLogEntry");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Name");

                    b.Property<bool>("Public");

                    b.Property<string>("SearchCriteria");

                    b.HasKey("Id");

                    b.ToTable("RmaFilter");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaIncomingShipment", b =>
                {
                    b.Property<int?>("RmaId");

                    b.Property<int?>("IncomingShipmentId");

                    b.HasKey("RmaId", "IncomingShipmentId");

                    b.HasIndex("IncomingShipmentId");

                    b.ToTable("RmaIncomingShipment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int>("InventoryItemId");

                    b.Property<decimal?>("Price");

                    b.Property<int>("RmaId");

                    b.Property<int?>("SalesOrderLineItemId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("RmaId");

                    b.HasIndex("SalesOrderLineItemId");

                    b.ToTable("RmaLineItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaOutgoingShipment", b =>
                {
                    b.Property<int?>("OutgoingShipmentId");

                    b.Property<int?>("RmaId");

                    b.HasKey("OutgoingShipmentId", "RmaId");

                    b.HasIndex("OutgoingShipmentId")
                        .IsUnique();

                    b.HasIndex("RmaId");

                    b.ToTable("RmaOutgoingShipment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaReasonOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("RmaReasonOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaStatusOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("RmaStatusOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BillingAddressId");

                    b.Property<string>("BiosRequirements");

                    b.Property<DateTime?>("CancelledAt");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ContactId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("CreditCardId");

                    b.Property<int?>("CurrencyOptionId")
                        .IsRequired();

                    b.Property<string>("CustomerNotes");

                    b.Property<string>("CustomerPurchaseOrderNumber");

                    b.Property<int?>("CustomerTypeId");

                    b.Property<string>("Email");

                    b.Property<decimal?>("ExpediteFee");

                    b.Property<string>("FreightAccountNumber");

                    b.Property<int?>("GidLocationOptionId");

                    b.Property<string>("InternalReferenceNumber");

                    b.Property<bool?>("IsEbayOrder");

                    b.Property<int?>("LeadId");

                    b.Property<int?>("LeadOriginOptionId");

                    b.Property<int?>("OutgoingShipmentShippingTermOptionId");

                    b.Property<bool>("PartialShipAccepted");

                    b.Property<string>("PaypalEmailAddress");

                    b.Property<string>("Phone");

                    b.Property<int?>("QuoteId");

                    b.Property<int?>("SalesOrderPaymentMethodId");

                    b.Property<int?>("SalesOrderStatusOptionId");

                    b.Property<int?>("SalesPersonId");

                    b.Property<decimal?>("SalesTax");

                    b.Property<bool>("SaturdayDeliveryAccepted");

                    b.Property<DateTime?>("SentAt");

                    b.Property<string>("ShippingAccountNumber");

                    b.Property<int?>("ShippingAddressId");

                    b.Property<decimal?>("ShippingAndHandlingFee");

                    b.Property<int?>("ShippingCarrierId");

                    b.Property<int?>("ShippingCarrierShippingMethodId");

                    b.Property<int?>("ShippingMethodId");

                    b.Property<int?>("ShippingTypeId");

                    b.Property<decimal>("Total");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<decimal?>("WireTransferFee");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("CurrencyOptionId");

                    b.HasIndex("Email");

                    b.HasIndex("GidLocationOptionId");

                    b.HasIndex("Phone");

                    b.HasIndex("QuoteId");

                    b.HasIndex("SalesOrderPaymentMethodId");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("ShippingCarrierId");

                    b.HasIndex("ShippingCarrierShippingMethodId");

                    b.HasIndex("Total");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderAttachment", b =>
                {
                    b.Property<int>("SalesOrderId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("SalesOrderId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("SalesOrderAttachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderChatMessage", b =>
                {
                    b.Property<int?>("SalesOrderId");

                    b.Property<int?>("ChatMessageId");

                    b.Property<int?>("SalesOrderChatMessageTypeId");

                    b.HasKey("SalesOrderId", "ChatMessageId");

                    b.HasIndex("ChatMessageId");

                    b.ToTable("SalesOrderChatMessage");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderEventLogEntry", b =>
                {
                    b.Property<int?>("SalesOrderId");

                    b.Property<int?>("EventLogEntryId");

                    b.HasKey("SalesOrderId", "EventLogEntryId");

                    b.HasIndex("EventLogEntryId");

                    b.ToTable("SalesOrderEventLogEntry");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Name");

                    b.Property<bool>("Public");

                    b.Property<string>("SearchCriteria");

                    b.HasKey("Id");

                    b.ToTable("SalesOrderFilter");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderInventoryItem", b =>
                {
                    b.Property<int?>("InventoryItemId");

                    b.Property<int?>("SalesOrderId");

                    b.HasKey("InventoryItemId", "SalesOrderId");

                    b.HasIndex("InventoryItemId")
                        .IsUnique();

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderInventoryItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderLineItem", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryOfOriginId");

                    b.Property<int?>("CpuQuantity");

                    b.Property<string>("CpuRequirements");

                    b.Property<int?>("CpuStockVerifiedOptionId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<decimal?>("DeclaredValue");

                    b.Property<string>("Description");

                    b.Property<decimal?>("DiscountPercent");

                    b.Property<string>("DisplayPartNumber");

                    b.Property<int?>("LeadTimeRangeEnd");

                    b.Property<int?>("LeadTimeRangeStart");

                    b.Property<string>("LeadTimeRangeUnit");

                    b.Property<int?>("LineItemConditionTypeId");

                    b.Property<int?>("LineItemServiceTypeId");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("ManufacturerName");

                    b.Property<int?>("MemoryQuantity");

                    b.Property<int?>("MemoryStockVerifiedOptionId");

                    b.Property<int?>("OutgoingLineItemLeadTimeOptionId");

                    b.Property<int?>("OutgoingLineItemWarrantyOptionId");

                    b.Property<decimal?>("Price");

                    b.Property<int?>("ProductId");

                    b.Property<string>("ProductName");

                    b.Property<int?>("Quantity");

                    b.Property<int>("SalesOrderId");

                    b.Property<string>("ScheduleB");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CountryOfOriginId");

                    b.HasIndex("LineItemConditionTypeId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OutgoingLineItemLeadTimeOptionId");

                    b.HasIndex("OutgoingLineItemWarrantyOptionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderLineItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderLineItemInventoryItem", b =>
                {
                    b.Property<int?>("InventoryItemId");

                    b.Property<int?>("SalesOrderLineItemId");

                    b.HasKey("InventoryItemId", "SalesOrderLineItemId");

                    b.HasIndex("SalesOrderLineItemId");

                    b.ToTable("SalesOrderLineItemInventoryItem");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderLineItemSource", b =>
                {
                    b.Property<int?>("SalesOrderLineItemId");

                    b.Property<int?>("SourceId");

                    b.Property<int?>("PurchaseOrderId");

                    b.Property<int?>("Quantity");

                    b.HasKey("SalesOrderLineItemId", "SourceId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SourceId");

                    b.ToTable("SalesOrderLineItemSource");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderNote", b =>
                {
                    b.Property<int?>("SalesOrderId");

                    b.Property<int?>("NoteId");

                    b.HasKey("SalesOrderId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("SalesOrderNote");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderOutgoingShipment", b =>
                {
                    b.Property<int?>("OutgoingShipmentId");

                    b.Property<int?>("SalesOrderId");

                    b.HasKey("OutgoingShipmentId", "SalesOrderId");

                    b.HasIndex("OutgoingShipmentId")
                        .IsUnique();

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderOutgoingShipment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderPaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("SalesOrderPaymentMethod");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderPurchaseOrder", b =>
                {
                    b.Property<int?>("PurchaseOrderId");

                    b.Property<int?>("SalesOrderId");

                    b.HasKey("PurchaseOrderId", "SalesOrderId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderPurchaseOrder");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderStatusOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("Locked");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("SalesOrderStatusOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ShipmentTrackingEvent", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Code");

                    b.Property<string>("CountryCode");

                    b.Property<string>("CountryName");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("ExceptionCode");

                    b.Property<string>("ExceptionDescription");

                    b.Property<string>("Location");

                    b.Property<int?>("Order");

                    b.Property<string>("OrganizationName");

                    b.Property<string>("PostalCode");

                    b.Property<string>("StateProvinceCode");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.ToTable("ShipmentTrackingEvent");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ShippingCarrier", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountNumberLength");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("HideFromCustomer");

                    b.Property<string>("Name");

                    b.Property<string>("TrackingNumberLink");

                    b.HasKey("Id");

                    b.ToTable("ShippingCarrier");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ShippingCarrierShippingMethod", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("ShippingCarrierId");

                    b.Property<int?>("SortPosition");

                    b.HasKey("Id");

                    b.HasIndex("ShippingCarrierId");

                    b.ToTable("ShippingCarrierShippingMethod");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ShippingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ShippingMethod");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ShippingType", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ShippingType");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cost");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("CurrencyOptionId");

                    b.Property<int?>("LeadTimeRangeEnd");

                    b.Property<int?>("LeadTimeRangeStart");

                    b.Property<string>("LeadTimeRangeUnit");

                    b.Property<string>("ListingId");

                    b.Property<bool?>("Ncnr");

                    b.Property<int?>("PortalId");

                    b.Property<int?>("ProductConditionOptionId");

                    b.Property<int?>("ProductId");

                    b.Property<string>("ProductSourceWebPage");

                    b.Property<int?>("Quantity");

                    b.Property<decimal?>("ShippingCost");

                    b.Property<int?>("SourceLeadTimeOptionId");

                    b.Property<int?>("SupplierId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<DateTime?>("VerifiedAt");

                    b.Property<int?>("WarrantyDuration");

                    b.Property<string>("WarrantyDurationUnit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Source");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SourceAttachment", b =>
                {
                    b.Property<int>("SourceId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("SourceId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("SourceAttachment");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SourceLeadTimeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("SourceLeadTimeOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SourceNote", b =>
                {
                    b.Property<int>("SourceId");

                    b.Property<int>("NoteId");

                    b.HasKey("SourceId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("SourceNote");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SourceWarrantyOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("SourceWarrantyOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AutoCCSelf");

                    b.Property<Guid?>("AzureObjectId")
                        .IsRequired();

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DefaultGidLocationOptionId");

                    b.Property<string>("Department");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("JobTitle");

                    b.Property<string>("LastName");

                    b.Property<string>("MobilePhone");

                    b.Property<int?>("MostRecentBillFilterId");

                    b.Property<int?>("MostRecentCompanyFilterId");

                    b.Property<int?>("MostRecentContactFilterId");

                    b.Property<int?>("MostRecentInventoryItemFilterId");

                    b.Property<int?>("MostRecentInvoiceFilterId");

                    b.Property<int?>("MostRecentLeadFilterId");

                    b.Property<int?>("MostRecentProductFilterId");

                    b.Property<int?>("MostRecentPurchaseOrderFilterId");

                    b.Property<int?>("MostRecentQuoteFilterId");

                    b.Property<int?>("MostRecentRmaFilterId");

                    b.Property<int?>("MostRecentSalesOrderFilterId");

                    b.Property<int?>("MostRecentSourceFilterId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("WorkPhone");

                    b.HasKey("Id");

                    b.HasAlternateKey("AzureObjectId");

                    b.HasIndex("DefaultGidLocationOptionId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.UserGroup", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AzureId");

                    b.Property<bool?>("Deactivated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AzureId");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.UserUserGroup", b =>
                {
                    b.Property<int?>("UserId");

                    b.Property<int?>("UserGroupId");

                    b.HasKey("UserId", "UserGroupId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("UserUserGroup");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.View", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Name");

                    b.Property<string>("ObjectName");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UserGroupId");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("View");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ViewDisplayField", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FieldName");

                    b.Property<string>("FieldType");

                    b.Property<string>("Header");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<bool>("Sortable");

                    b.Property<int>("ViewId");

                    b.HasKey("Id");

                    b.HasIndex("ViewId");

                    b.ToTable("ViewDisplayField");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ViewFilter", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FieldName");

                    b.Property<string>("FieldType");

                    b.Property<string>("Name");

                    b.Property<bool>("UserViewable");

                    b.Property<string>("Value");

                    b.Property<string>("ViewFilterCondition");

                    b.Property<int>("ViewId");

                    b.HasKey("Id");

                    b.HasIndex("ViewId");

                    b.ToTable("ViewFilter");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ViewObjectNameOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ViewObjectNameOption");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Address", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Attachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Bill", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("Bills")
                        .HasForeignKey("CompanyId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Bills")
                        .HasForeignKey("PurchaseOrderId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.BillAttachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany("BillAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Bill", "Bill")
                        .WithMany("Attachments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.BillCashDisbursement", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Bill", "Bill")
                        .WithMany("CashDisbursements")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.CashDisbursement", "CashDisbursement")
                        .WithMany("Bills")
                        .HasForeignKey("CashDisbursementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.BillChatMessage", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Bill", "Bill")
                        .WithMany("ChatMessages")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ChatMessage", "ChatMessage")
                        .WithMany("Bills")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.BillLineItem", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Bill", "Bill")
                        .WithMany("LineItems")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Product", "Product")
                        .WithMany("BillLineItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderLineItem", "PurchaseOrderLineItem")
                        .WithMany("BillLineItems")
                        .HasForeignKey("PurchaseOrderLineItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CashDisbursement", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("CashDisbursements")
                        .HasForeignKey("CompanyId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PaymentAccount", "PaymentAccount")
                        .WithMany("CashDisbursements")
                        .HasForeignKey("PaymentAccountId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Rma", "Rma")
                        .WithMany()
                        .HasForeignKey("RmaId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CashReceipt", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("CashReceipts")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ChatMessage", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ChatMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ChatMessageId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ChatMessageAttachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ChatMessage", "ChatMessage")
                        .WithMany("Attachments")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Company", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "ParentCompany")
                        .WithMany("ChildCompanies")
                        .HasForeignKey("ParentCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.CompanyAddress", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressCompanyId", "BillingAddressAddressId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.CompanyAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressCompanyId", "ShippingAddressAddressId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyAddress", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyAlias", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company")
                        .WithMany("Aliases")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyAttachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany("CompanyAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("Attachments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyContact", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("CompanyContacts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Contact", "Contact")
                        .WithMany("CompanyContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyEmailAddress", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.EmailAddress", "EmailAddress")
                        .WithMany()
                        .HasForeignKey("EmailAddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyEventLogEntry", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("EventLogEntries")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.EventLogEntry", "EventLogEntry")
                        .WithMany("CompanyEventLogEntries")
                        .HasForeignKey("EventLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyNote", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("Notes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Note", "Note")
                        .WithMany("CompanyNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyPhoneNumber", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PhoneNumber", "PhoneNumber")
                        .WithMany("CompanyPhoneNumbers")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CompanyPortal", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("Portals")
                        .HasForeignKey("CompanyId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactAddress", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Contact", "Contact")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactAttachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany("ContactAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Contact", "Contact")
                        .WithMany("Attachments")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactEmailAddress", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Contact", "Contact")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.EmailAddress", "EmailAddress")
                        .WithMany()
                        .HasForeignKey("EmailAddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactEventLogEntry", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Contact", "Contact")
                        .WithMany("EventLogEntries")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.EventLogEntry", "EventLogEntry")
                        .WithMany("ContactEventLogEntries")
                        .HasForeignKey("EventLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactNote", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Contact", "Contact")
                        .WithMany("Notes")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Note", "Note")
                        .WithMany("ContactNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ContactPhoneNumber", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Contact", "Contact")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Credit", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("Credits")
                        .HasForeignKey("CompanyId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.CreditAccount", "CreditAccount")
                        .WithMany()
                        .HasForeignKey("CreditAccountId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Rma", "Rma")
                        .WithMany("Credits")
                        .HasForeignKey("RmaId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.CreditCardTransaction", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Invoice", "Invoice")
                        .WithMany("CreditCardTransactions")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrder", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("SalesOrderId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.GidLocationOption", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Address", "DefaultShippingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultShippingAddressId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Address", "MainAddress")
                        .WithMany()
                        .HasForeignKey("MainAddressId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.IncomingShipment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.User", "ReceiptSigner")
                        .WithMany()
                        .HasForeignKey("ReceiptSignerId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ShippingCarrier", "ShippingCarrier")
                        .WithMany()
                        .HasForeignKey("ShippingCarrierId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.IncomingShipmentInventoryItem", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.IncomingShipment", "IncomingShipment")
                        .WithMany("InventoryItems")
                        .HasForeignKey("IncomingShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.InventoryItem", "InventoryItem")
                        .WithMany("IncomingShipmentInventoryItems")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.IncomingShipmentShipmentTrackingEvent", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.IncomingShipment", "IncomingShipment")
                        .WithMany("TrackingEvents")
                        .HasForeignKey("IncomingShipmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ShipmentTrackingEvent", "ShipmentTrackingEvent")
                        .WithMany("IncomingShipmentShipmentTrackingEvents")
                        .HasForeignKey("ShipmentTrackingEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItem", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.InventoryItem")
                        .WithMany("ChildInventoryItems")
                        .HasForeignKey("InventoryItemId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderLineItem", "PurchaseOrderLineItem")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderLineItemId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItemAttachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany("InventoryItemAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.InventoryItem", "InventoryItem")
                        .WithMany("Attachments")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItemEventLogEntry", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.EventLogEntry", "EventLogEntry")
                        .WithMany()
                        .HasForeignKey("EventLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.EventLogEntry")
                        .WithMany("InventoryItemEventLogEntries")
                        .HasForeignKey("EventLogEntryId1");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.InventoryItem", "InventoryItem")
                        .WithMany("EventLogEntries")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItemNote", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.InventoryItem")
                        .WithMany("Notes")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Note")
                        .WithMany("InventoryItemNotes")
                        .HasForeignKey("NoteId1");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InventoryItemRelatedInventoryItem", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.InventoryItem", "ChildInventoryItem")
                        .WithOne("ParentRelatedInventoryItem")
                        .HasForeignKey("GidIndustrial.Gideon.WebApi.Models.InventoryItemRelatedInventoryItem", "ChildInventoryItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.InventoryItem", "ParentInventoryItem")
                        .WithMany("ChildRelatedInventoryItems")
                        .HasForeignKey("ParentInventoryItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Invoice", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("Invoices")
                        .HasForeignKey("CompanyId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.CurrencyOption", "CurrencyOption")
                        .WithMany()
                        .HasForeignKey("CurrencyOptionId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.GidLocationOption", "GidLocationOption")
                        .WithMany()
                        .HasForeignKey("GidLocationOptionId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrder", "SalesOrder")
                        .WithMany("Invoices")
                        .HasForeignKey("SalesOrderId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.User", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ShippingCarrier", "ShippingCarrier")
                        .WithMany()
                        .HasForeignKey("ShippingCarrierId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ShippingCarrierShippingMethod", "ShippingCarrierShippingMethod")
                        .WithMany()
                        .HasForeignKey("ShippingCarrierShippingMethodId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InvoiceAttachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany("InvoiceAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Invoice", "Invoice")
                        .WithMany("Attachments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InvoiceCashReceipt", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.CashReceipt", "CashReceipt")
                        .WithMany("Invoices")
                        .HasForeignKey("CashReceiptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Invoice", "Invoice")
                        .WithMany("CashReceipts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InvoiceChatMessage", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ChatMessage", "ChatMessage")
                        .WithMany("Invoices")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Invoice", "Invoice")
                        .WithMany("ChatMessages")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InvoiceCredit", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Credit", "Credit")
                        .WithMany("Invoices")
                        .HasForeignKey("CreditId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Invoice", "Invoice")
                        .WithMany("Credits")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InvoiceEventLogEntry", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.EventLogEntry", "EventLogEntry")
                        .WithMany()
                        .HasForeignKey("EventLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Invoice", "Invoice")
                        .WithMany("EventLogEntries")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.InvoiceLineItem", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Invoice", "Invoice")
                        .WithMany("LineItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Product", "Product")
                        .WithMany("InvoiceLineItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrderLineItem", "SalesOrderLineItem")
                        .WithMany("InvoiceLineItems")
                        .HasForeignKey("SalesOrderLineItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Lead", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.User", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.User")
                        .WithMany("Leads")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadAttachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany("LeadAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Lead", "Lead")
                        .WithMany("Attachments")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadChatMessage", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ChatMessage", "ChatMessage")
                        .WithMany("Leads")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Lead", "Lead")
                        .WithMany("ChatMessages")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadEventLogEntry", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.EventLogEntry", "EventLogEntry")
                        .WithMany("LeadEventLogEntries")
                        .HasForeignKey("EventLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Lead", "Lead")
                        .WithMany("EventLogEntries")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadLineItem", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Lead")
                        .WithMany("LineItems")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadLineItemSource", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.LeadLineItem", "LeadLineItem")
                        .WithMany("Sources")
                        .HasForeignKey("LeadLineItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadNote", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Lead")
                        .WithMany("Notes")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Note", "Note")
                        .WithMany("LeadNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRule", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.User")
                        .WithMany("LeadRoutingRules")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRuleCountry", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRule", "LeadRoutingRule")
                        .WithMany("Countries")
                        .HasForeignKey("LeadRoutingRuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRuleLeadWebsite", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRule", "LeadRoutingRule")
                        .WithMany("LeadWebsites")
                        .HasForeignKey("LeadRoutingRuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.LeadWebsite", "LeadWebsite")
                        .WithMany()
                        .HasForeignKey("LeadWebsiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRuleLineItemServiceType", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRule", "LeadRoutingRule")
                        .WithMany("LineItemServiceTypes")
                        .HasForeignKey("LeadRoutingRuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.LineItemServiceType", "LineItemServiceType")
                        .WithMany("LeadRoutingRules")
                        .HasForeignKey("LineItemServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRuleProductType", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.LeadRoutingRule", "LeadRoutingRule")
                        .WithMany("ProductTypes")
                        .HasForeignKey("LeadRoutingRuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Note", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.OutgoingShipment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.OutgoingShipmentShippingTermOption", "OutgoingShipmentShippingTermOption")
                        .WithMany()
                        .HasForeignKey("OutgoingShipmentShippingTermOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ShippingCarrier", "ShippingCarrier")
                        .WithMany()
                        .HasForeignKey("ShippingCarrierId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ShippingCarrierShippingMethod", "ShippingCarrierShippingMethod")
                        .WithMany()
                        .HasForeignKey("ShippingCarrierShippingMethodId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.OutgoingShipmentBox", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.OutgoingShipment", "OutgoingShipment")
                        .WithMany("Boxes")
                        .HasForeignKey("OutgoingShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.OutgoingShipmentBoxInventoryItem", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.InventoryItem", "InventoryItem")
                        .WithMany("OutgoingShipmentBoxes")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.OutgoingShipmentBox", "OutgoingShipmentBox")
                        .WithMany("InventoryItems")
                        .HasForeignKey("OutgoingShipmentBoxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.OutgoingShipmentShipmentTrackingEvent", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.OutgoingShipment", "OutgoingShipment")
                        .WithMany("TrackingEvents")
                        .HasForeignKey("OutgoingShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ShipmentTrackingEvent", "ShipmentTrackingEvent")
                        .WithMany("OutgoingShipmentShipmentTrackingEvents")
                        .HasForeignKey("OutgoingShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Product", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ProductAttachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany("ProductAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Product", "Product")
                        .WithMany("Attachments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ProductNote", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Note", "Note")
                        .WithMany("ProductNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Product", "Product")
                        .WithMany("Notes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrder", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.CurrencyOption", "CurrencyOption")
                        .WithMany()
                        .HasForeignKey("CurrencyOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.GidLocationOption", "GidLocationOption")
                        .WithMany()
                        .HasForeignKey("GidLocationOptionId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderPaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderPaymentMethodId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderAttachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Attachments")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderChatMessage", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ChatMessage", "ChatMessage")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("ChatMessages")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderEventLogEntry", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.EventLogEntry", "EventLogEntry")
                        .WithMany()
                        .HasForeignKey("EventLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("EventLogEntries")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderIncomingShipment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.IncomingShipment", "IncomingShipment")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("IncomingShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("IncomingShipments")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderLineItem", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.LineItemConditionType", "LineItemConditionType")
                        .WithMany()
                        .HasForeignKey("LineItemConditionTypeId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("LineItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.PurchaseOrderNote", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Note", "Note")
                        .WithMany("PurchaseOrderNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Notes")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Quote", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.CurrencyOption", "CurrencyOption")
                        .WithMany()
                        .HasForeignKey("CurrencyOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.GidLocationOption", "GidLocationOption")
                        .WithMany()
                        .HasForeignKey("GidLocationOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Lead", "Lead")
                        .WithMany("Quotes")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.QuoteStatusOption", "QuoteStatusOption")
                        .WithMany()
                        .HasForeignKey("QuoteStatusOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.User", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ShippingMethod", "ShippingMethod")
                        .WithMany()
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteAttachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany("QuoteAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Quote", "Quote")
                        .WithMany("Attachments")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteChatMessage", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ChatMessage", "ChatMessage")
                        .WithMany("Quotes")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Quote", "Quote")
                        .WithMany("ChatMessages")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteEventLogEntry", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.EventLogEntry", "EventLogEntry")
                        .WithMany("QuoteEventLogEntries")
                        .HasForeignKey("EventLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Quote", "Quote")
                        .WithMany("EventLogEntries")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteLineItem", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.LineItemConditionType", "Condition")
                        .WithMany()
                        .HasForeignKey("LineItemConditionTypeId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.LineItemServiceType", "Service")
                        .WithMany()
                        .HasForeignKey("LineItemServiceTypeId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.OutgoingLineItemLeadTimeOption", "LeadTime")
                        .WithMany()
                        .HasForeignKey("OutgoingLineItemLeadTimeOptionId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.OutgoingLineItemWarrantyOption", "Warranty")
                        .WithMany()
                        .HasForeignKey("OutgoingLineItemWarrantyOptionId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Product", "Product")
                        .WithMany("QuoteLineItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Quote", "Quote")
                        .WithMany("LineItems")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteLineItemSource", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.QuoteLineItem", "QuoteLineItem")
                        .WithMany("Sources")
                        .HasForeignKey("QuoteLineItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Source", "Source")
                        .WithMany("QuoteLineItems")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.QuoteNote", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Note", "Note")
                        .WithMany("QuoteNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Quote", "Quote")
                        .WithMany("Notes")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Repair", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany("Repairs")
                        .HasForeignKey("RepairAuthorizationAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrder", "SalesOrder")
                        .WithMany("Repairs")
                        .HasForeignKey("SalesOrderId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RepairIncomingShipment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.IncomingShipment", "IncomingShipment")
                        .WithMany("Repairs")
                        .HasForeignKey("IncomingShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Repair", "Repair")
                        .WithMany("IncomingShipments")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Rma", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.CurrencyOption", "CurrencyOption")
                        .WithMany()
                        .HasForeignKey("CurrencyOptionId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.GidLocationOption", "GidLocationOption")
                        .WithMany()
                        .HasForeignKey("GidLocationOptionId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.RmaActionOption", "RmaActionOption")
                        .WithMany()
                        .HasForeignKey("RmaActionOptionId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.RmaReasonOption", "RmaReasonOption")
                        .WithMany()
                        .HasForeignKey("RmaReasonOptionId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrder", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("SalesOrderId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaAttachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany("RmaAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Rma", "Rma")
                        .WithMany("Attachments")
                        .HasForeignKey("RmaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaChatMessage", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ChatMessage", "ChatMessage")
                        .WithMany("Rmas")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Rma", "Rma")
                        .WithMany("ChatMessages")
                        .HasForeignKey("RmaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaEventLogEntry", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.EventLogEntry", "EventLogEntry")
                        .WithMany()
                        .HasForeignKey("EventLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Rma", "Rma")
                        .WithMany("EventLogEntries")
                        .HasForeignKey("RmaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaIncomingShipment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.IncomingShipment", "IncomingShipment")
                        .WithMany("Rmas")
                        .HasForeignKey("IncomingShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Rma", "Rma")
                        .WithMany("IncomingShipments")
                        .HasForeignKey("RmaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaLineItem", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.InventoryItem", "InventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Rma")
                        .WithMany("LineItems")
                        .HasForeignKey("RmaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrderLineItem", "SalesOrderLineItem")
                        .WithMany("RmaLineItems")
                        .HasForeignKey("SalesOrderLineItemId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.RmaOutgoingShipment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.OutgoingShipment", "OutgoingShipment")
                        .WithOne("RmaOutgoingShipment")
                        .HasForeignKey("GidIndustrial.Gideon.WebApi.Models.RmaOutgoingShipment", "OutgoingShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Rma", "Rma")
                        .WithMany("OutgoingShipments")
                        .HasForeignKey("RmaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrder", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Company")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CompanyId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.CreditCard", "CreditCard")
                        .WithMany()
                        .HasForeignKey("CreditCardId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.CurrencyOption", "CurrencyOption")
                        .WithMany()
                        .HasForeignKey("CurrencyOptionId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.GidLocationOption", "GidLocationOption")
                        .WithMany()
                        .HasForeignKey("GidLocationOptionId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Quote", "Quote")
                        .WithMany("SalesOrders")
                        .HasForeignKey("QuoteId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrderPaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("SalesOrderPaymentMethodId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.User", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ShippingCarrier", "ShippingCarrier")
                        .WithMany()
                        .HasForeignKey("ShippingCarrierId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ShippingCarrierShippingMethod", "ShippingCarrierShippingMethod")
                        .WithMany()
                        .HasForeignKey("ShippingCarrierShippingMethodId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderAttachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany("SalesOrderAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrder", "SalesOrder")
                        .WithMany("Attachments")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderChatMessage", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ChatMessage", "ChatMessage")
                        .WithMany("SalesOrders")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrder", "SalesOrder")
                        .WithMany("ChatMessages")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderEventLogEntry", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.EventLogEntry", "EventLogEntry")
                        .WithMany("SalesOrderEventLogEntries")
                        .HasForeignKey("EventLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrder", "SalesOrder")
                        .WithMany("EventLogEntries")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderInventoryItem", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.InventoryItem", "InventoryItem")
                        .WithOne("SalesOrderInventoryItem")
                        .HasForeignKey("GidIndustrial.Gideon.WebApi.Models.SalesOrderInventoryItem", "InventoryItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrder", "SalesOrder")
                        .WithMany("InventoryItems")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderLineItem", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Country", "CountryOfOrigin")
                        .WithMany()
                        .HasForeignKey("CountryOfOriginId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.LineItemConditionType", "LineItemConditionType")
                        .WithMany()
                        .HasForeignKey("LineItemConditionTypeId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.OutgoingLineItemLeadTimeOption", "LeadTime")
                        .WithMany()
                        .HasForeignKey("OutgoingLineItemLeadTimeOptionId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.OutgoingLineItemWarrantyOption", "Warranty")
                        .WithMany()
                        .HasForeignKey("OutgoingLineItemWarrantyOptionId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrder")
                        .WithMany("LineItems")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderLineItemInventoryItem", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.InventoryItem", "InventoryItem")
                        .WithMany("SalesOrderLineItems")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrderLineItem", "SalesOrderLineItem")
                        .WithMany("InventoryItems")
                        .HasForeignKey("SalesOrderLineItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderLineItemSource", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("SalesOrderLineItemSources")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrderLineItem", "SalesOrderLineItem")
                        .WithMany("Sources")
                        .HasForeignKey("SalesOrderLineItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Source", "Source")
                        .WithMany("SalesOrderLineItems")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderNote", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Note", "Note")
                        .WithMany("SalesOrderNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrder", "SalesOrder")
                        .WithMany("Notes")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderOutgoingShipment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.OutgoingShipment", "OutgoingShipment")
                        .WithOne("SalesOrderOutgoingShipment")
                        .HasForeignKey("GidIndustrial.Gideon.WebApi.Models.SalesOrderOutgoingShipment", "OutgoingShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrder", "SalesOrder")
                        .WithMany("OutgoingShipments")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SalesOrderPurchaseOrder", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("SalesOrders")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.SalesOrder", "SalesOrder")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ShippingCarrierShippingMethod", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.ShippingCarrier")
                        .WithMany("ShippingMethods")
                        .HasForeignKey("ShippingCarrierId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.Source", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SourceAttachment", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Attachment", "Attachment")
                        .WithMany("SourceAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Source", "Source")
                        .WithMany("Attachments")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.SourceNote", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Note", "Note")
                        .WithMany("SourceNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.Source", "Source")
                        .WithMany("Notes")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.User", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.GidLocationOption", "DefaultGidLocationOption")
                        .WithMany()
                        .HasForeignKey("DefaultGidLocationOptionId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.UserUserGroup", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.View", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId");
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ViewDisplayField", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.View", "View")
                        .WithMany("DisplayFields")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GidIndustrial.Gideon.WebApi.Models.ViewFilter", b =>
                {
                    b.HasOne("GidIndustrial.Gideon.WebApi.Models.View", "View")
                        .WithMany("Filters")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
